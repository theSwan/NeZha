# md5 hash in nezha language
# guan@pku.edu.cn

# this is a comment

# this told compiler the endian conversion method
endian = __little_endian__

const uint32 IV0 = 0x67452301
const uint32 IV1 = 0xefcdab89
const uint32 IV2 = 0x98badcfe
const uint32 IV3 = 0x10325476

# the vector type should be defined as type[num]
# which is not like array in C/C++
const uint8[64] S = [
	7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,
	5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,
	4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,
	6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21]

const uint32[64] K = [
	0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
	0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
	0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
	0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
	0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
	0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
	0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
	0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
	0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
	0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
	0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
	0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
	0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
	0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
	0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
	0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391]

# the function is like python
def md5_block(uint32[4] md, uint32[16] block):

	# assign multiple values, this can be easily vectorized
	uint32 a, b, c, d = IV0, IV1, IV2, IV3
	uint32 f, g

	# the loop is like python
	for i in range(0, 20):
		f = (b and c) or ((not b) and d)
		g = i
		# this is a permutation of multiple values
		a, b, c, d = d, b + (f + K[i] + m[g]) <<< s[i], b, c

	for i in range(20, 40):
		f = (d and b) or ((not d) and c)
		g = (5 * i + 1) % 16
		a, b, c, d = d, b + (f + K[i] + m[g]) <<< s[i], b, c

	for i in range(40, 60):
		f = b xor c xor d
		g = (3 * i + 5) % 16
		a, b, c, d = d, b + (f + K[i] + m[g]) <<< s[i], b, c

	for i in range(60, 80):
		f = c xor (b or (not d))
		g = (7 * i) % 16
		a, b, c, d = d, b + (f + K[i] + m[g]) <<< s[i], b, c	

	# the addition is vectorized addition
	md += [a, b, c, d]

	return

